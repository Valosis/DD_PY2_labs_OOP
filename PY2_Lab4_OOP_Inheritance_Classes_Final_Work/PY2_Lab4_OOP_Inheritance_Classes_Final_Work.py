class Home:
    """ Базовый класс Home (жилище, которое может быть любое) """

    def __init__(self, country: str, city: str):
        """
        Инициализация, создание экземпляра класса Home (жилище).

        :param country: Страна
        :param city: Город
        """
        # country - это свойство, проверка валидности значения происходить в его setter
        self.country = country
        # city - это свойство, проверка валидности значения происходить в его setter
        self.city = city

    @property
    def country(self) -> str:
        """
        getter для country
        """
        return self._country
    @country.setter
    def country(self, new_country: str) -> None:
        """
        setter для country

        :param new_country: Страна
        :raise TypeError: Название страны должно быть типа str
        :raise ValueError: Название страны должно состоять хотя бы из одной буквы
        """

        # Проверяем тип данных
        if not (isinstance(new_country, str)):
            raise TypeError("Название страны должно быть типа str")
        # Проверяем значение переменной
        if not (len(new_country) >= 1):
            raise ValueError("Название страны должно состоять хотя бы из одной буквы")

        self._country = new_country


    @property
    def city(self) -> str:
        """
        getter для city
        """
        return self._city
    @city.setter
    def city(self, new_city: str) -> None:
        """
        setter для city

        :param new_city: Город
        :raise TypeError: Название города должно быть типа str
        :raise ValueError: Название города должно состоять хотя бы из одной буквы
        """

        # Проверяем тип данных
        if not (isinstance(new_city, str)):
            raise TypeError("Название города должно быть типа str")
        # Проверяем значение переменной
        if not (len(new_city) >= 1):
            raise ValueError("Название города должно состоять хотя бы из одной буквы")

        self._new_city = new_city


    def if_country_city_exist(self) -> bool:
        """
        Проверяем, что такая страна и город существует или что в их написании нет ошибки.
        Согласно заданию реализацию методов писать необязательно, но в общем случае подразумевается
                                                                            обращение к базе данных, поиск в ней.
        В случае неудачи вызов ValueError с информацией о потенциальной орфографической ошибке,
                                                                                если имеются близкие варианты.
        Например, "Россияяя" - "Россия", "Рссия" - "Россия", "Рос" - "Россия"

        :raise ValueError: Если город или страна не нашлись,
            то вызываем ValueError с информацией о потенциальной орфографической ошибке, если имеются близкие варианты.
        :return bool: Возвращается значение true/false - нашлись ли данные страна и город в базе данных или нет.

        Данный метод наследуется в дочерних классах, так как проверка валиндности значений country и city одинаковая.
        """
        ...

    def calculate_home_price(self) -> float:
        """
        Рассчитывается рыночная стоимость жилища (дома, квартиры, апартаментов и т.д.),
                                                                                основанная на множестве параметров.
        Согласно заданию реализацию методов писать необязательно, но в общем случае рыночная стоимость жилища
            рассчитывается на основе страны и города. Конечно же, такой подход очень неточный,
                                                            и является просто формулой по умолчанию.

        Именно поэтому этот метод однозначно должен быть переопределен (реализован, дореализован) в дочерних классах.

        :return: Рыночная стоимость жилища (дома, квартиры, апартаментов и т.д.)
        """
        ...

    def __str__(self):
        ...

    def __repr__(self):
        ...



class House(Home):
    ...